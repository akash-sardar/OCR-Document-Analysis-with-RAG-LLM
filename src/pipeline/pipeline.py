import sys
import os

from src.components.document_ingestion import DocumentIngestion
from src.components.image_preprocessing import ImagePreProcessing
from src.components.image_ocr_transformation import ImageOCRTransformation
from src.components.text_extraction import TextExtraction

from src.entity.artifact_entity import *
from src.entity.config_entity import *

from src.logger import get_logger
logger = get_logger(__name__)
from src.exception import srcException

class pipeline:
    def __init__(self):
        self.data_ingestion_config = DataIngestionConfig()
        self.image_preprocessing_config = ImagePreProcessingConfig()
        self.image_ocr_transformation_config = ImageOCRTransformationConfig()
        self.text_extraction_config = TextExtractionConfig()

    def start_data_ingestion(self) -> DataIngestionArtifact:
        """
        This method of Pipeline class is responsible for starting data ingestion component
        """
        try:
            logger.info("Entered the start_data_ingestion method of Pipeline class")
            document_ingestion = DocumentIngestion(data_ingestion_config=self.data_ingestion_config)
            data_ingestion_artifact = document_ingestion.process_multiple_pdfs()
            logger.info("Document Ingestion is complete")
            return data_ingestion_artifact
        except Exception as e:
            raise srcException(e, sys) from e


    def start_image_preprocessing(self, data_ingestion_artifact: DataIngestionArtifact) -> ImagePreProcessingArtifact:
        """
        This method of Pipeline class is responsible for preprocessing images generated by pdf to images
        """
        try:
            logger.info("Entered the start_image_preprocessing method of Pipeline class")            
            image_preprocessing = ImagePreProcessing(data_ingestion_artifact=data_ingestion_artifact,
                                                     image_processing_config=self.image_preprocessing_config)
            image_preprocessing_artifact = image_preprocessing.get_preprocessed_images()
            logger.info("Image Preprocessing is complete")            
            return image_preprocessing_artifact
        except Exception as e:
            raise srcException(e, sys)


    def start_image_ocr(self, image_preprocessing_artifact: ImagePreProcessingArtifact) -> ImageOCRTransformationArtifact:
        """
        This method of Pipeline class is responsible for generating text out of images by OCR
        """
        try:
            logger.info("Entered the start_image_ocr method of Pipeline class")            
            image_ocr = ImageOCRTransformation(image_preprocessing_artifact=image_preprocessing_artifact,
                                            image_ocr_transformation_config=self.image_ocr_transformation_config)
            image_ocr_transformation_artifact = image_ocr.perform_ocr()
            logger.info("Image OCR is complete")            
            return image_ocr_transformation_artifact
        except Exception as e:
            logger.error("Error occurred in start_image_ocr", exc_info=True)
            raise srcException(e, sys)


    # def start_text_extraction(self, image_ocr_transformation_artifact: ImageOCRTransformationArtifact) -> None:
    #     """
    #     This method of Pipeline class is responsible for extracting text out of OCR outputs
    #     """
    #     try:
    #         logger.info("Entered the start_text_extraction method of Pipeline class")            
    #         text_extraction = TextExtraction(image_ocr_transformation_artifact=image_ocr_transformation_artifact,
    #                                         text_extraction_config=self.text_extraction_config)
    #         text_extraction.get_hybridized_result()
    #         logger.info("Text Extraction is complete")            
    #         return image_ocr_transformation_artifact
    #     except Exception as e:
    #         raise srcException(e, sys)


    def run_pipeline(self) -> None:
        """
        This method of Pipeline class is responsible for running complete pipeline
        """
        try:
            data_ingestion_artifact = self.start_data_ingestion()
            image_preprocessing_artifact = self.start_image_preprocessing(data_ingestion_artifact)
            image_ocr_transformation_artifact = self.start_image_ocr(image_preprocessing_artifact)
            

        except Exception as e:
            raise srcException(e, sys)